#!/usr/bin/python
# -*- coding: UTF-8 -*-


import sys, os, json, getopt

JSON_DATA_BASENAME = ".dependencies"

SCRIPT_ROOT = os.path.dirname(os.path.realpath(__file__))
REPOS_ROOT = os.path.dirname(SCRIPT_ROOT)


#################### 
#################### 
#################### 
class HFGit():

  @staticmethod
  def is_repo(repo_path):
    if os.path.exists(repo_path):
      os.chdir(repo_path)
      pipe = os.popen("git status")
      return not pipe.close()
    else:
      return False
  
  @staticmethod
  def checkout(repo_path, branch):
    if os.path.exists(repo_path):
      os.chdir(repo_path)
      pipe = os.popen("git checkout %s"%(branch))
      return not pipe.close()
    else:
      return False

  @staticmethod
  def pull(repo_path):
    if os.path.exists(repo_path):
      os.chdir(repo_path)
      pipe = os.popen("git pull")
      return not pipe.close()
    else:
      return False


  @staticmethod
  def clone(repo_root, repo):
    if os.path.exists(repo_root):
      os.chdir(repo_root)
      pipe = os.popen("git clone %s"%(repo))
      return not pipe.close()
    else:
      return False



#################### 
#################### 
#################### 
class HFDependency(object):
  _repo=""
  _branch="master"
  _commit=""
  
  def copy(self):
    self_copy = HFDependency()
    self_copy.deserialize(self.serialize())
    return self_copy
  
  def serialize(self):
    return [
           self.get_repo(),
           self.get_branch(),
           self.get_commit()
           ]

  def deserialize(self, data):
    [repo, branch, commit] = data
    self.set_repo(str(repo))
    self.set_branch(str(branch))
    self.set_commit(str(commit))

  def validate_type(self, received, expected, function):
    if not isinstance(received, expected):
      raise Exception("%s type expected, %s received in %s" %(expected, type(received), function.__name__))
      return False
    else:
      return True

  def get_repo(self):
    return self._repo

  def get_repo_name(self):
    return os.path.basename(self.get_repo())[0:-4]

  def set_repo(self, repo):
    if self.validate_type(repo, str, self.set_repo):
      self._repo=repo


  def get_branch(self):
    return self._branch

  def set_branch(self, branch):
    if self.validate_type(branch, str, self.set_branch):
      self._branch=branch


  def get_commit(self):
    #raise Exception("NOT IMPLEMENTED!")
    return self._commit

  def set_commit(self, commit):
    #raise Exception("NOT IMPLEMENTED!")
    if self.validate_type(commit, str, self.set_commit):
      self._commit=commit
  
  def resolve(self):
    print self.get_repo_name()
    dep_path=os.path.join(REPOS_ROOT, self.get_repo_name())
    if not HFGit.is_repo(dep_path):
      HFGit.clone(REPOS_ROOT, self.get_repo())
      
    print "-----before checkout"
    if not HFGit.checkout(dep_path, self.get_branch()):
      print "Error switching to branch '%s'"%(self.get_branch())
    print "-----after checkout"
    if not HFGit.pull(dep_path):
      print "Error pulling branch '%s'"%(self.get_branch())
    os.chdir(dep_path)
    pipe = os.popen("./resolve-deps")




#################### 
#################### 
#################### 
def main(argv):
  add_repo    = ""
  add_branch  = "master"
  add_commit  = ""
  del_repo    = ""

  try:
    opts, args = getopt.getopt(argv,"la:b:c:d:",["add=","branch=","commit=","delete="])
  except getopt.GetoptError:
    print 'Usage:\n'
    print '  Resolve dependencies:\n    %s\n'%(os.path.basename(__file__))
    print '  List existing dependencies:\n    %s -l\n'%(os.path.basename(__file__))
    print '  Add new dependency:\n    %s -a <git branch> [-b <branch name>] [-c <commit hash>]'%(os.path.basename(__file__))
    print '    %s --add=<git branch> --branch=<branch name> --commit=<commit hash>\n'%(os.path.basename(__file__))
    sys.exit(2)
  for opt, arg in opts:
    
    if opt == "-l":
      list_dependencies()
      
    if opt in ("-a", "--add"):
      add_repo = arg
      
    elif opt in ("-b", "--branch"):
      add_branch = arg
      
    elif opt in ("-c", "--commit"):
      add_commit = arg
      
    elif opt in ("-d", "--del"):
      del_repo = arg
      

  if opts == []:
    print "Resolving dependencies..."
    resolve_dependencies()

  if add_repo != "":
    new_dep = HFDependency()
    new_dep.deserialize([add_repo, add_branch, add_commit])
    add_dependency(new_dep)

  if del_repo != "":
    del_dep = HFDependency()
    del_dep.set_repo(del_repo)
    del_dependency(del_dep)





#################### 
#################### 
#################### 
def del_dependency(dependency):
  dependency_list = read_deps()
  for dep in dependency_list:
    if dep.get_repo() == dependency.get_repo():
      dependency_list.remove(dep)
      update_deps(dependency_list)
      print "Removing '%s' from dependency list."%(dep.get_repo())
      return
  print "'%s' not found in dependency list."%(dep.get_repo())
 

#################### 
#################### 
#################### 
def add_dependency(dependency):
  dependency_list = read_deps()
  for dep in dependency_list:
    if dep.get_repo() == dependency.get_repo():
      dep.deserialize(dependency.serialize())
      update_deps(dependency_list)
      print "'%s' repo exists as a dependency. Updating only."%(dep.get_repo())
      return
  dependency_list.append(dependency)
  update_deps(dependency_list)
  



#################### 
#################### 
#################### 
def resolve_dependencies():
  dependency_list = read_deps()
  
  for dep in dependency_list:
    dep.resolve()
  





#################### 
#################### 
#################### 
def list_dependencies():
  col_repo      = "REPOSITORY"
  col_branch    = "BRANCH"
  col_commit    = "COMMIT"
  col_repo_w    = len(col_repo)
  col_branch_w  = len(col_branch)
  col_commit_w  = len(col_commit)

  for dep in read_deps():
    col_repo_w    = max(col_repo_w,   len(dep.get_repo()))
    col_branch_w  = max(col_branch_w, len(dep.get_branch()))
    col_commit_w  = max(col_commit_w, len(dep.get_commit()))

  print "| %s | %s | %s |"%(  col_repo    + ' '*(col_repo_w   - len(col_repo)),
                              col_branch  + ' '*(col_branch_w - len(col_branch)),
                              col_commit  + ' '*(col_commit_w - len(col_commit)),
                           )
  print '|-'+'-'*col_repo_w+'-|-'+'-'*col_branch_w+'-|-'+'-'*col_commit_w+'-|'

  for dep in read_deps():
    print "| %s | %s | %s |"%(  dep.get_repo()    + ' '*(col_repo_w   - len(dep.get_repo())),
                                dep.get_branch()  + ' '*(col_branch_w - len(dep.get_branch())),
                                dep.get_commit()  + ' '*(col_commit_w - len(dep.get_commit())),
                             )
#print "%d."%(dep_num)
#print "Repo   : %s"%(dep.get_repo())
#print "Branch : %s"%(dep.get_branch())
#print "Commit : %s"%(dep.get_commit())




#################### 
#################### 
#################### 
def read_deps():
  json_data_file_path = os.path.join(SCRIPT_ROOT, JSON_DATA_BASENAME)
  json_data = ""
  try:
    json_data_file = open(json_data_file_path, 'r+')
    json_data = json_data_file.read()
    json_data_file.close()
  except IOError:
    #print "No dependency file at '%s'"%(json_data_file_path)
    pass 
  
  dependency_list = []
  
  if json_data != "":
    try:
      data_list = json.loads( json_data )
    except:
      print "ERROR PARSING JSON FILE!"
      sys.exit(1)
  else:
    return dependency_list
  
  for data in data_list:
    new_dependency = HFDependency()
    new_dependency.deserialize(data)
    dependency_list.append(new_dependency)
  
  return dependency_list 





#################### 
#################### 
#################### 
def update_deps(dependency_list):
  data_list=[]
  for dependency in dependency_list:
    data_list.append(dependency.serialize())

  json_data_file = open(os.path.join(SCRIPT_ROOT,JSON_DATA_BASENAME), 'w')
  json_data_file.write(json.dumps(data_list))
  json_data_file.close()





#################### 
if __name__ == "__main__":
  main(sys.argv[1:])




